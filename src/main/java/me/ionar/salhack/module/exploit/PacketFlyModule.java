package me.ionar.salhack.module.exploit;

import java.util.Random;

import me.ionar.salhack.events.MinecraftEvent.Era;
import me.ionar.salhack.events.network.EventNetworkPacketEvent;
import me.ionar.salhack.events.player.EventPlayerMotionUpdate;
import me.ionar.salhack.events.player.EventPlayerMove;
import me.ionar.salhack.events.player.EventPlayerPushOutOfBlocks;
import me.ionar.salhack.events.player.EventPlayerTravel;
import me.ionar.salhack.main.SalHack;
import me.ionar.salhack.module.Module;
import me.ionar.salhack.module.Value;
import me.ionar.salhack.util.MathUtil;
import me.zero.alpine.fork.listener.EventHandler;
import me.zero.alpine.fork.listener.Listener;
import net.minecraft.network.play.client.CPacketConfirmTeleport;
import net.minecraft.network.play.client.CPacketPlayer;
import net.minecraft.network.play.server.SPacketPlayerPosLook;

public final class PacketFlyModule extends Module
{
    public final Value<Boolean> AntiKick = new Value<Boolean>("AntiKick", new String[] {""}, "Prevents you from getting kicked while flying by vanilla anticheat", true);

    public PacketFlyModule()
    {
        super("PacketFly", new String[]
        { "PacketFly" }, "Uses packets to fly", "NONE", 0xDB248A, ModuleType.EXPLOIT);
    }
    
    private Random _random = new Random();

    @EventHandler
    private Listener<EventNetworkPacketEvent> PacketEvent = new Listener<>(event ->
    {
        if (event.getPacket() instanceof SPacketPlayerPosLook && mc.currentScreen == null)
        {
            SPacketPlayerPosLook packet = (SPacketPlayerPosLook)event.getPacket();

            mc.player.connection.sendPacket(new CPacketConfirmTeleport(packet.getTeleportId()));
            mc.player.connection.sendPacket(new CPacketPlayer.PositionRotation(packet.getX(), packet.getY(), packet.getZ(), packet.getYaw(), packet.getPitch(), false));

            mc.player.setPosition(packet.getX(), packet.getY(), packet.getZ());

            event.cancel();
        }
    });

    @EventHandler
    private Listener<EventPlayerMotionUpdate> OnPlayerUpdate = new Listener<>(event ->
    {
        if (event.getEra() != Era.PRE)
            return;
        
        mc.player.setVelocity(0, 0, 0);

        event.cancel();

        if (mc.gameSettings.keyBindJump.isKeyDown())
            mc.player.motionY = 0.008;
        else if (mc.gameSettings.keyBindSneak.isKeyDown())
            mc.player.motionY = -0.008;

        final double[] dir = MathUtil.directionSpeed(0.008f);
        
        mc.player.motionX = dir[0];
        mc.player.motionZ = dir[1];

        if (mc.player.ticksExisted % 4 == 0 && AntiKick.getValue())
        {
            mc.player.motionY -= 0.04f;
            mc.player.connection.sendPacket(new CPacketPlayer.PositionRotation(mc.player.posX + mc.player.motionX, mc.player.posY + mc.player.motionY, mc.player.posZ + mc.player.motionZ, mc.player.rotationYaw, mc.player.rotationPitch, mc.player.onGround));
        }
        else
        {
            mc.player.connection.sendPacket(new CPacketPlayer.PositionRotation(mc.player.posX + mc.player.motionX, mc.player.posY + mc.player.motionY, mc.player.posZ + mc.player.motionZ, mc.player.rotationYaw, mc.player.rotationPitch, mc.player.onGround));
            
            if (mc.gameSettings.keyBindJump.isKeyDown())
            {
                mc.player.connection.sendPacket(new CPacketPlayer.Position(_random.nextInt(100000) + mc.player.motionX, mc.player.posY + 0.004, _random.nextInt(100000) + mc.player.motionZ, mc.player.onGround));
            }
            else if (mc.gameSettings.keyBindSneak.isKeyDown())
            {
                mc.player.connection.sendPacket(new CPacketPlayer.Position(_random.nextInt(100000) + mc.player.motionX, mc.player.posY - 0.004, _random.nextInt(100000) + mc.player.motionZ, mc.player.onGround));
            }
        }
    });

    @Override
    public void onEnable()
    {
        super.onEnable();
    }

    @Override
    public void onDisable()
    {
        super.onDisable();
    }
}
